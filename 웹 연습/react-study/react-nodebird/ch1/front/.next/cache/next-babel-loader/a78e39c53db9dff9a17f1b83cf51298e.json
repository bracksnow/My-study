{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport var initialState = {\n  mainPosts: []\n}; //초기 state\n\nvar ADD_POST = 'ADD_POST'; //액션의 이름\n\nvar ADD_DUMMY = 'ADD_DUMMY'; //액션의 이름\n\nvar addPost = {\n  type: ADD_POST\n}; //액션의 내용\n\nvar addDummy = {\n  type: ADD_DUMMY,\n  data: {\n    content: 'HI',\n    userid: 1,\n    user: {\n      nickname: 'gwon'\n    }\n  }\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_POST:\n      return _objectSpread({}, state);\n\n    case ADD_DUMMY:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: [action.data].concat(_toConsumableArray(state.mainPosts)) //action의 data와 state의 mainPosts를 넣어준다는 의미\n\n      });\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/82108/WebstormProjects/react-nodebird/ch1/front/reducers/post.js"],"names":["initialState","mainPosts","ADD_POST","ADD_DUMMY","addPost","type","addDummy","data","content","userid","user","nickname","reducer","state","action"],"mappings":";;;;;;;AAAA,OAAO,IAAMA,YAAY,GAAG;AACxBC,EAAAA,SAAS,EAAC;AADc,CAArB,C,CAEL;;AACF,IAAMC,QAAQ,GAAG,UAAjB,C,CAA4B;;AAC5B,IAAMC,SAAS,GAAG,WAAlB,C,CAA8B;;AAE9B,IAAMC,OAAO,GAAG;AACZC,EAAAA,IAAI,EAACH;AADO,CAAhB,C,CAEE;;AAEF,IAAMI,QAAQ,GAAG;AACbD,EAAAA,IAAI,EAACF,SADQ;AAEbI,EAAAA,IAAI,EAAC;AACDC,IAAAA,OAAO,EAAC,IADP;AAEDC,IAAAA,MAAM,EAAC,CAFN;AAGDC,IAAAA,IAAI,EAAC;AACDC,MAAAA,QAAQ,EAAC;AADR;AAHJ;AAFQ,CAAjB;;AAWA,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBb,YAAyB;AAAA,MAAXc,MAAW;;AAC9C,UAAQA,MAAM,CAACT,IAAf;AACI,SAAKH,QAAL;AACI,+BACOW,KADP;;AAGJ,SAAKV,SAAL;AACI,6CACOU,KADP;AAEIZ,QAAAA,SAAS,GAAGa,MAAM,CAACP,IAAV,4BAAmBM,KAAK,CAACZ,SAAzB,EAFb,CAEgD;;AAFhD;;AAIJ;AAAQ;AACJ,iCACOY,KADP;AAGH;AAdL;AAgBH,CAjBD;;AAkBA,eAAeD,OAAf","sourcesContent":["export const initialState = {\r\n    mainPosts:[]\r\n};//초기 state\r\nconst ADD_POST = 'ADD_POST';//액션의 이름\r\nconst ADD_DUMMY = 'ADD_DUMMY';//액션의 이름\r\n\r\nconst addPost = {\r\n    type:ADD_POST,\r\n};//액션의 내용\r\n\r\nconst addDummy = {\r\n    type:ADD_DUMMY,\r\n    data:{\r\n        content:'HI',\r\n        userid:1,\r\n        user:{\r\n            nickname:'gwon'\r\n        }\r\n    },\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            return {\r\n                ...state\r\n            };\r\n        case ADD_DUMMY:\r\n            return {\r\n                ...state,\r\n                mainPosts: [action.data, ...state.mainPosts]//action의 data와 state의 mainPosts를 넣어준다는 의미\r\n            };\r\n        default:{\r\n            return{\r\n                ...state\r\n            };\r\n        }\r\n    }\r\n};\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}