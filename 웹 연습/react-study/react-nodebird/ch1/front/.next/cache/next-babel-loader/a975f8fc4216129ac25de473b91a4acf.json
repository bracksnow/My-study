{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const initialState = {\n  isLoggedIn: false,\n  user: {}\n}; //초기 state를 만들어준다\n\nconst LOG_IN = 'LOG_IN'; //액션의 이름->대문자로 적어준다\n\nconst LOG_OUT = 'LOG_OUT';\nconst loginAction = {\n  type: LOG_IN,\n  data: {\n    nickname: 'gwon'\n  }\n};\nconst logoutAction = {\n  type: LOG_OUT\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case LOG_IN:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          isLoggedIn: true,\n          user: action.data\n        });\n      }\n\n    case LOG_OUT:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          isLoggedIn: false,\n          user: null\n        });\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/82108/WebstormProjects/react-nodebird/ch1/front/reducers/user.js"],"names":["initialState","isLoggedIn","user","LOG_IN","LOG_OUT","loginAction","type","data","nickname","logoutAction","reducer","state","action"],"mappings":";;;;;;AAAA,OAAO,MAAMA,YAAY,GAAG;AACxBC,EAAAA,UAAU,EAAC,KADa;AAExBC,EAAAA,IAAI,EAAC;AAFmB,CAArB,C,CAGN;;AAED,MAAMC,MAAM,GAAG,QAAf,C,CAAwB;;AACxB,MAAMC,OAAO,GAAG,SAAhB;AAEA,MAAMC,WAAW,GAAG;AAChBC,EAAAA,IAAI,EAACH,MADW;AAEhBI,EAAAA,IAAI,EAAC;AACDC,IAAAA,QAAQ,EAAC;AADR;AAFW,CAApB;AAMA,MAAMC,YAAY,GAAG;AACjBH,EAAAA,IAAI,EAACF;AADY,CAArB;;AAKA,MAAMM,OAAO,GAAG,CAACC,KAAK,GAAGX,YAAT,EAAuBY,MAAvB,KAAiC;AAC7C,UAAQA,MAAM,CAACN,IAAf;AACI,SAAKH,MAAL;AAAY;AACR,+CACOQ,KADP;AACaV,UAAAA,UAAU,EAAE,IADzB;AAC+BC,UAAAA,IAAI,EAACU,MAAM,CAACL;AAD3C;AAGH;;AACD,SAAKH,OAAL;AAAa;AACT,+CACOO,KADP;AACcV,UAAAA,UAAU,EAAE,KAD1B;AACiCC,UAAAA,IAAI,EAAC;AADtC;AAGH;;AACD;AAAQ;AACJ,iCACOS,KADP;AAGH;AAfL;AAiBH,CAlBD;;AAmBA,eAAeD,OAAf","sourcesContent":["export const initialState = {\r\n    isLoggedIn:false,\r\n    user:{},\r\n}//초기 state를 만들어준다\r\n\r\nconst LOG_IN = 'LOG_IN';//액션의 이름->대문자로 적어준다\r\nconst LOG_OUT = 'LOG_OUT';\r\n\r\nconst loginAction = {\r\n    type:LOG_IN,\r\n    data:{\r\n        nickname:'gwon',\r\n    }\r\n};\r\nconst logoutAction = {\r\n    type:LOG_OUT,\r\n\r\n}\r\n\r\nconst reducer = (state = initialState, action) =>{\r\n    switch (action.type){\r\n        case LOG_IN:{\r\n            return{\r\n                ...state,isLoggedIn: true, user:action.data\r\n            }\r\n        }\r\n        case LOG_OUT:{\r\n            return{\r\n                ...state, isLoggedIn: false, user:null\r\n            }\r\n        }\r\n        default:{\r\n            return{\r\n                ...state\r\n            }\r\n        }\r\n    }\r\n};\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}